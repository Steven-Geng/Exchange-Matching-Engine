This is the instruction for functionality testing.


In functionality testing, you can start by running "sudo docker-compose up" in one terminal 
, and then execute "./run_client" in another terminal. This will control the client to send 
requests to the server. These requests are 8 XML files located in the test_resources folder, 
and the client will send them one by one (starting with test1.xml and ending with test8.xml).

Based on the content of these 8 XML files, the responses received by the client should be as follows:
1.
<results>
    <error sym="apple" amount="20" limit="10">This accountID doesn't exist</error>
    <error sym="applea" amount="20" limit="10">This accountID doesn't exist</error>
    <error sym="apple" amount="50" limit="1000">This accountID doesn't exist</error>
    <error id="1">This accountID doesn't exist</error>
    <error id="1">This accountID doesn't exist</error>
</results>
2.
<results>
    <created id="1001"/>
    <created id="1002"/>
    <created id="1003"/>
    <created id="1004"/>
    <created sym="apple" id="1001"/>
    <created sym="apple" id="1003"/>
</results>
3.
<results>
    <created sym="banana" id="1001"/>
    <created sym="banana" id="1002"/>
    <created sym="strawberry" id="1002"/>
    <created sym="strawberry" id="1003"/>
    <created sym="watermelon" id="1002"/>
    <created sym="watermelon" id="1004"/>
    <created sym="blueberry" id="1003"/>
    <created sym="blueberry" id="1004"/>
</results>
4.
<results>
    <error sym="banana" amount="-20" limit="10">This accountID doesn't exist</error>
    <error sym="strawberry" amount="-20" limit="10">This accountID doesn't exist</error>
    <error sym="banana" amount="50" limit="20">This accountID doesn't exist</error>
    <error id="2">This accountID doesn't exist</error>
    <error id="4">This accountID doesn't exist</error>
</results>
5.
<results>
    <error sym="banana" amount="-200" limit="10">Insufficient shares</error>
    <opened sym="apple" amount="-20" limit="10" id="1"/>
    <error sym="watermelon" amount="-50" limit="20">No position found for the symbol</error>
    <error id="2">Invalid trans_ID</error>
    <error id="4">No transaction found with transID: 4</error>
</results>
6.
<results>
    <opened sym="watermelon" amount="-100" limit="20" id="2"/>
    <error sym="apple" amount="-20" limit="10">No position found for the symbol</error>
    <opened sym="watermelon" amount="50" limit="15" id="3"/>
    <error id="1">Invalid trans_ID</error>
    <error id="1">No transaction found with transID: 1</error>
</results>
7.
<results>
    <opened sym="apple" amount="-50" limit="20" id="4"/>
    <opened sym="blueberry" amount="-20" limit="40" id="5"/>
    <error sym="watermelon" amount="-50" limit="20">No position found for the symbol</error>
    <opened sym="strawberry" amount="-50" limit="50" id="6"/>
    <status id="4">
        <open shares="-50"/>
    </status>
    <error id="3">No transaction found with transID: 3</error>
</results>
8.
<results>
    <opened sym="blueberry" amount="-100" limit="30" id="7"/>
    <status id="7">
        <open shares="-100"/>
    </status>
    <opened sym="watermelon" amount="-50" limit="40" id="8"/>
    <opened sym="watermelon" amount="50" limit="50" id="9"/>
    <status id="9">
        <executed shares="50" price="20" time="1712628478"/>
    </status>
    <error id="9">No transaction found with transID: 9</error>
</results>


If you want to conduct additional testing, feel free to modify 
the content of files within the test_resources directory. 
However, please note that it's preferable to name your XML 
files as testX.xml, where X is a number, to ensure that the script 
sends the XML files sequentially according to X. 
My client is configured to print the received responses, 
allowing you to assess whether the server's functionality is correct based on the printed output.